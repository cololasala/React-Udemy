En la carpeta bases se hizo repaso de Javascript
React usa:
JSX = Javascript + xml
react trabaja en el background con Babel

https://create-react-app.dev/
https://es.reactjs.org/
npx create-react-app 02-intro-javascript -> crea app react

Fetch API nos permite hacer peticiones http sin ninguna otra libreria (viene incluida en javascript).

02-intro-javascript, si se quiere probar algo se debe poner el codigo en el index.js
se puede ejecutar directamente el codigo javascript con -> node "nombreArchivo.js"
--------------------------------------------------------------------------------------------------------------
Seccion 4 Primeros pasos en React counter-app

Un componente es una pieza de codigo encapsulada que hace una funcion en especifico y puede tener estado o no. El estado es 
como se encuentra la informacion del componente en punto determinado del tiempo.
React permite crear 2 tipos de componentes: 1-basados en clase, 2-basados en funciones (esta ultima tiene mas popularidad hoy en dia)

A traves de las properties podemos enviar info desde componente padre hacia el componente hijo.
Con rafcp y presionando enter crea un functional component en un archivo.
Un hook es una funcion, generalmente los definidos empiezan con la palabra "use" -> useEffect, useContext, etc. El useState retorna un array
en donde es [variable, funcion], nosotros con la funcion podemos setear nuevos valores a nuestra variable. Se hizo un contador donde podemos 
incrementar contador, decrementar o resetear.

--------------------------------------------------------------------------------------------------------------
Seccion 5 Pruebas unitarias y de integracion

https://jestjs.io/
Pruebas unitarias: enfocadas en pequenas funcionalidades.
Pruebas de integracion: enfocadas en como reaccionan varias pruebas en conjunto.
En src de 03-counter-app en la carpeta base se pusieron archivos para hacer pruebas y se creo la carpeta tests. Se corre npm run test y se correran
todos los archivos .test.js .Algo importante es que para correr los test no deberian haber console.log en los archivos a probar.
Para probar solo un archivo a la vez se debe correr el test,luego tocar "q", luego tocar "w" , luego opcion "p" y busco el archivo elegido.
Las pruebas unitarias por defecto son sincronas.

Para las pruebas de PrimeraApp component primero se creo en la carpeta src el archivo "setupTests.js".
https://enzymejs.github.io/enzyme/
npm i --save-dev enzyme -> instalo enzyme
en realidad se hizo con este (ya que aun no sale para react 17) -> https://github.com/wojtekmaj/enzyme-adapter-react-17
npm install --save-dev enzyme-to-json -> este paquete pone mas lindo el formato del componente en la carpeta _snaphots_
Se van a crear Snapshot y para actualizarlos pide que se ponga la letra "u", al correr una prueba.

--------------------------------------------------------------------------------------------------------------
Seccion 6 Creacion de aplicacion GifExpertApp

En esta seccion se explica llamadas a api, comunicacion entre componentes, uso de customHooks.

https://es.reactjs.org/docs/faq-structure.html -> estructura de archivos de React
https://hackernoon.com/structuring-projects-and-naming-components-in-react-1261b6e18d76 -> estructura de folders

para agregar elementos en un array de un useState, se debe hacer con el spread operator.
Cuando envio al componente AddCategory setCategory estoy enviando la "referencia" a setCategory.
useEffect es un hook que permite ejecutar codigo de manera condicional, tiene un array de dependencias (si esta vacio no dependera de nada).
A GifItem paso {...img}, eso hace que se pase cada propiedad(id,title,url) como si fuera "independiente", entonces depues en las props del component
puedo desestructurar y obtener esas props de manera separada.
encodeURI resuelve algunas cosas como agregar el "%20" en las url.
los helpers son funciones que hacen algo en especifico, pueden recibir argumentos, lo procesan y hacen un return.

Hacer un Custom hook consiste en extraer logica de un componente para poder utilizarla nuevamente de manera sencilla. Se hizo uno en la carpeta hooks.
Los useEffect, useContext,useState, etc no pueden ser async ya que esperan algo sincrono.
https://animate.style/ -> animaciones css

--------------------------------------------------------------------------------------------------------------
Seccion 7
https://www.npmjs.com/package/http-server --> instalando este paquete y poniendo http-server -o levanta la app como si estuviera
en un server

El repo creado solo fue para la carpeta -> 04-gif-expert-app
Se hicieron unas configuraciones para usar git Pages en GitHub. Se corrio npm run build y se cambio el nombre de la carpeta build por "docs".
En el index de la carpeta docs se hizo un format para que quede bien el html y se pusieron bien las rutas a los href y src.
Luego en gitHub se hiceron las configuraciones para usar git pages en "Settigs" y se puede acceder a esto -> https://cololasala.github.io/react-gif-expert-app/ 
git remote remove origin -> para sacar el remote 
git remote add origin https://github.com/cololasala/react-gif-expert-app.git -> setear el remote

--------------------------------------------------------------------------------------------------------------
Seccion 8
https://react-hooks-testing-library.com/ -> libreria util para testear hooks

--------------------------------------------------------------------------------------------------------------
Seccion 9

En esta seccion se crearon los componentes con .jsx (aunque con .js funcionan igual)
Un hook no puede ser creado de manera condicional, es decir no puede ponerse en un If por ejemplo y siempre deben estar en la parte
mas arriba de nuestro componente.
Cuando se crea un nuevo custom hook se debe empezar con "use".
useEffect es un hook que nos permite ejecutar algun efecto secundario cuando ocurra algo en nuestro componente.
useRef es un hook que sirve para manejar valores de variables pero no realiza renderizaciones luego de un cambio.
useLayoutEffect es muy parecido al useEffect solo que se dispara cuando se terminan todas la mutaciones del DOM.
memo es una funcion de react que hace que se memorice el componente, en nuestro ejemplo evitaba que se vuelva a dibujar el componente.
(Falta ultima tarea del ultimo video).

--------------------------------------------------------------------------------------------------------------
Seccion 10 (Reducer y useReducer)

Un Reducer es una funcion, usualmente recibe dos argumentos, el estado incial y la accion que quiero ejecutar. Se considera una funcion pura
es decir, no debe tener efectos secundarios, debe resolver todo lo que pide, tampoco debe tener tareas asincronas y siempre debe retornar un 
nuevo estado, no debe llamar al localStorage o sessionStorage.

El useReducer es muy parecido al useState pero es mas utilizado cuando existen muchas acciones que pueden modificar el state de nuestra
app.

En esta seccion creamos un useTodos, dentro del mismo usamos toda la logica, tenemos el Reducer llamado todoReducer que maneja la logica de las cosas
que puedo hacer con las tareas (agregar, eliminar o poner como completada), tenemos el initialState que es un array vacio y una funcion init inicializadora
en donde preguntamos si en el localStorage tenemos ya data cargada.
Tambien usamos useEffect a para controlas el localStorage.

VER CUANDO ES UNA FUNCION CON PARENTESIS -> { funcion() } O SIN -> { funcion }
Para llamar a una funcion en html es con parentesis (la funcion esta en el mismo archivo por ejemplo) -> { funcion() }

--------------------------------------------------------------------------------------------------------------
Seccion 11 (useContext)

useContext permite una comunicacion entre componentes sin usar las properties, un buen ejemplo es cuando necesito pasar info
desde el abuelo al padre y del padre al nieto.

Nuestro Context va a estar en un nivel superior y servira de contenedor de informacion que les va a permitir a los componentes
hijos de el poder leer y ejecutra metodos que se encuentren dentro del Context.

Se instalo react-reouter-dom -> npm install react-router-dom@6
BrowserRouter es un higher order component, es decir, es un componenent que recibe otros componentes dentro de el. Todos los componentes
dentro de el tendran acceso a su info.

Se creo un UserProvider que es el provee la info que sera utilizada en los componentes hijos.

--------------------------------------------------------------------------------------------------------------
Seccion 12 (pruebas unitarias de hooks y custom hooks)

Se siguio esta guia de instalacion -> https://gist.github.com/Klerith/ca7e57fae3c9ab92ad08baadc6c26177
Para hacer test de hooks usamos renderHook.
Para hacer test de fetch necesitamos data y para eso usamos jest.mock

--------------------------------------------------------------------------------------------------------------
Seccion 14 (SPA, simple page application)

El barrel se crea primero en las subcarpetas, y luego se crea el principal de la carpeta. Por ejemplo en la carpeta "ui",
primero se crea un barrel en la carpeta components, luego en la carperta ui y si quiero usar el navbar se importa asi ->
import  { NavBar } from '../ui'
Si por ejemplo se siguen agregando cosas, solo se deben updatear los barrels.
useNavigate es un custom hook creado para facilitar ciertas cosas del manejo de rutas (por ejemplo hacer navegacion).

Se instalo el paquete -> npm add query-string , que se usa en Search.jsx psara poder manejar mejor los queries parameters.

--------------------------------------------------------------------------------------------------------------
Seccion 15 (Proteccion de rutas)

En esta seccion se usara Context para tener contexto acerca de las rutas cuando manejo la autenticacion.
El AuthProvider utiliza el AuthContext para proveer la info a toda la app. El AuthProvider tambien usa useReducer.
Para hacer rutas privadas se hace que una ruta envuelva a otras rutas "hijas". En la app hicimos como privadas las rutas cuando
estamos dentro de la app ("marvel", "dc", etc), y pusimos como "publicas" a las del login.

useLocation() obtiene info de la ruta actual, lo usamos para "recordar" la ultima pagina antes de hacer logout, de manera de que
si hacemos login otra vez volvemos a la ultima pagina donde estabamos antes.

--------------------------------------------------------------------------------------------------------------
Seccion 16 (Pruebas de Heroes App y rutas)
.
.
. se deja mitad para despues
--------------------------------------------------------------------------------------------------------------
Seccion 17 (MarialUI, estructura y diseño)

Se instalo -> https://mui.com/

Las pages son cosas que cubren toda la pantalla. Las views serian las cosas dentro de una page.
Box es como un div, y Grid permite definir elementos internamente.

--------------------------------------------------------------------------------------------------------------
Seccion 18 (Redux)
Es una forma de mantener el estado de mi app. Ayuda a que la actulizacion de la informacion siempre se realice a traves
una sola via predecible, con el objetivo de prevenir cambios accidentales en la info.

Store -> es la fuente de mi informacion, los componentes lo consumiran
